# kzp/crypto_logic.py

from ecpy.curves import Curve, Point
import secrets

# –ö—Ä–∏–≤–∞ –ï–¥–≤–∞—Ä–¥—Å–∞ Ed25519
curve = Curve.get_curve('Ed25519')
G = curve.generator
q = curve.order

# üîê –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤ —Å–µ—Ä–≤–µ—Ä–∞
_server_priv = secrets.randbelow(q)
_server_pub = _server_priv * G

# üîê –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è
_secretary_priv = secrets.randbelow(q)
_secretary_pub = _secretary_priv * G

def elgamal_encrypt(M: Point, pub_key: Point):
    r = secrets.randbelow(q)
    C1 = r * G
    C2 = M + r * pub_key
    return C1, C2

def elgamal_decrypt(C1: Point, C2: Point, priv_key: int) -> Point:
    return C2 - priv_key * C1

def verify_decrypted_point(M: Point, hash_scalar: int) -> bool:
    expected = hash_scalar * G
    return M == expected

def get_curve_params():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—Ä–∏–≤—É, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ –ø–æ—Ä—è–¥–æ–∫."""
    return curve, G, q

def get_server_keys():
    """–ü–æ–≤–µ—Ä—Ç–∞—î (–ø—Ä–∏–≤–∞—Ç–Ω–∏–π, –ø—É–±–ª—ñ—á–Ω–∏–π) –∫–ª—é—á—ñ —Å–µ—Ä–≤–µ—Ä–∞."""
    return _server_priv, _server_pub

def get_secretary_keys():
    """–ü–æ–≤–µ—Ä—Ç–∞—î (–ø—Ä–∏–≤–∞—Ç–Ω–∏–π, –ø—É–±–ª—ñ—á–Ω–∏–π) –∫–ª—é—á—ñ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è."""
    return _secretary_priv, _secretary_pub

