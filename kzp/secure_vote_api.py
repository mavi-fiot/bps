# kzp/secure_vote_api.py

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from ecpy.curves import Curve, Point
import hashlib, secrets
from kzp.store import BallotStorage

import uuid



# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫—Ä–∏–≤–æ—ó —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
curve = Curve.get_curve('Ed25519')
G = curve.generator
q = curve.order  # üëà –¢—ñ–ª—å–∫–∏ —Ç—É—Ç q —Å—Ç–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏–º

# –ü—ñ—Å–ª—è q ‚Äî –∫–ª—é—á—ñ:
server_priv = secrets.randbelow(q)
server_pub = server_priv * G

secretary_priv = secrets.randbelow(q)
secretary_pub = secretary_priv * G

router = APIRouter()

curve = Curve.get_curve('Ed25519')
G = curve.generator
q = curve.order

storage = BallotStorage()  # ‚Üê –º–∞—î –±—É—Ç–∏ –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ

class SignaturePoint(BaseModel):
    x: int
    y: int

class VoteIn(BaseModel):
    voter_id: str
    ballot_id: str
    choice: str
    signature: SignaturePoint
    public_key: SignaturePoint  # –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –≤–∏–±–æ—Ä—Ü—è

def elgamal_encrypt(M: Point, pub_key: Point):
    r = secrets.randbelow(q)
    C1 = r * G
    C2 = M + r * pub_key
    return C1, C2

@router.post("/generate_ballots")
def generate_ballots():
    text = "–ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–≤—ñ—Ç –∑–∞ 2024 —Ä—ñ–∫"
    base_question = "–ü–∏—Ç–∞–Ω–Ω—è –ø–µ—Ä—à–µ ‚Äì –ü—Ä–æ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –∑–∞ 2024 —Ä—ñ–∫"
    variants = ["–∑–∞", "–ø—Ä–æ—Ç–∏", "—É—Ç—Ä–∏–º–∞–≤—Å—è"]

    ballot_ids = {}

    for variant in variants:
        # –ö–æ–∂–µ–Ω –±—é–ª–µ—Ç–µ–Ω—å –æ–¥–Ω–∞–∫–æ–≤–∏–π –ø–æ —Å—É—Ç—ñ ‚Äî —Ä—ñ–∑–Ω–∏—Ü—è –ª–∏—à–µ —É –≤–∞—Ä—ñ–∞–Ω—Ç—ñ
        hash_scalar = int.from_bytes(hashlib.sha512(text.encode()).digest(), 'big') % q
        M = hash_scalar * G

        # 1. –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–æ–º
        C1_srv, C2_srv = elgamal_encrypt(M, server_pub)

        # 2. –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç–∞—Ä–µ–º
        C1_sec, C2_sec = elgamal_encrypt(C2_srv, secretary_pub)

        ballot_id = str(uuid.uuid4())
        ballot_ids[variant] = ballot_id

        storage.save_ballot(ballot_id, {
            "text": text,
            "variant": variant,
            "hash_scalar": hash_scalar,
            "M": M,
            "C1_srv": C1_srv,
            "C2_srv": C2_srv,
            "C1_sec": C1_sec,
            "C2_sec": C2_sec,
        })

    return {
        "question": base_question,
        "decision": text,
        "ballots": ballot_ids
    }    

@router.post("/vote")
def submit_vote(vote: VoteIn):
    ballot = storage.get_ballot(vote.ballot_id)
    if not ballot:
        raise HTTPException(status_code=404, detail="–ë—é–ª–µ—Ç–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    if vote.choice not in ["–∑–∞", "–ø—Ä–æ—Ç–∏"]:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π –≤–∏–±—ñ—Ä")

    # –•–µ—à –≤–∏–±–æ—Ä—É
    hash_scalar = int.from_bytes(hashlib.sha512(vote.choice.encode()).digest(), 'big') % q
    expected_point = hash_scalar * G

    # –ü—ñ–¥–ø–∏—Å, –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á
    signature = Point(vote.signature.x, vote.signature.y, curve)
    public_key = Point(vote.public_key.x, vote.public_key.y, curve)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –ø—ñ–¥–ø–∏—Å == h * G (–Ω–∞ —Ä—ñ–≤–Ω—ñ —Ç–æ—á–∫–∏)
    is_valid = signature == expected_point

    if not is_valid:
        raise HTTPException(status_code=403, detail="‚ùå –ü—ñ–¥–ø–∏—Å –Ω–µ–¥—ñ–π—Å–Ω–∏–π")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥–æ–ª–æ—Å (—Ö–µ—à + –ø—ñ–¥–ø–∏—Å)
    storage.store_encrypted(vote.voter_id, {
        "ballot_id": vote.ballot_id,
        "choice": vote.choice,
        "hash_scalar": hash_scalar,
        "signature": signature,
        "public_key": public_key
    })

    return {
        "status": "‚úÖ –ì–æ–ª–æ—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
        "voter_id": vote.voter_id,
        "choice": vote.choice,
        "valid_signature": is_valid
    }

@router.post("/finalize_vote")
def finalize_vote():
    results = {}
    ballots = storage.ballots
    votes = storage.get_all_votes()

    for voter_id, vote_data in votes.items():
        ballot_id = vote_data["ballot_id"]
        ballot = ballots.get(ballot_id)

        if not ballot:
            results[voter_id] = "‚ùå –ë—é–ª–µ—Ç–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            continue

        # –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: —Å–ø–æ—á–∞—Ç–∫—É —Å–µ–∫—Ä–µ—Ç–∞—Ä
        C1_sec = ballot["C1_sec"]
        C2_sec = ballot["C2_sec"]
        C2_srv = C2_sec - secretary_priv * C1_sec  # –∑–Ω—è—Ç–∏ —à–∏—Ñ—Ä —Å–µ–∫—Ä–µ—Ç–∞—Ä—è

        # –¢–µ–ø–µ—Ä —Å–µ—Ä–≤–µ—Ä
        C1_srv = ballot["C1_srv"]
        M = C2_srv - server_priv * C1_srv          # –∑–Ω—è—Ç–∏ —à–∏—Ñ—Ä —Å–µ—Ä–≤–µ—Ä–∞

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ—à—É
        expected_point = vote_data["hash_scalar"] * G
        if M != expected_point:
            results[voter_id] = "‚ùå –•–µ—à –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è"
            continue

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É (—â–µ —Ä–∞–∑, –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ)
        signature = vote_data["signature"]
        public_key = vote_data["public_key"]
        if signature != vote_data["hash_scalar"] * G:
            results[voter_id] = "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—ñ–¥–ø–∏—Å"
            continue

        # –ì–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è
        results[voter_id] = f"‚úÖ –ì–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {vote_data['choice']}"

    return results
