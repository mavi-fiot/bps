#python -m crypto.generate_valid_vote2

from ecpy.curves import Curve, Point
import secrets
import json
from hashlib import sha3_256

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
curve = Curve.get_curve('Ed25519')
G = curve.generator
q = curve.order

# –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
voter_id = "demo-voter"
ballot_text = "–ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–≤—ñ—Ç –∑–∞ 2024 —Ä—ñ–∫"
personalized = ballot_text + voter_id

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤
priv = secrets.randbelow(q)
pub = priv * G

# –•–µ—à—É–≤–∞–Ω–Ω—è
def hash_ballot(text: str) -> int:
    digest = sha3_256(text.encode("utf-8")).digest()
    return int.from_bytes(digest, byteorder="big") % q

hash_scalar = hash_ballot(personalized)
M = hash_scalar * G  # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —è–∫ —Ç–æ—á–∫–∞

# –ü—ñ–¥–ø–∏—Å (–¥–µ–º–æ)
signature = priv * G

# –í–∏–≤–µ–¥–µ–Ω–Ω—è JSON –¥–ª—è API
payload = {
    "voter_id": voter_id,
    "ballot_id": "üîª–°–Æ–î–ò –í–°–¢–ê–í ID –ó /generate_ballots",
    "choice": "–∑–∞",
    "signature": {
        "x": signature.x,
        "y": signature.y
    },
    "public_key": {
        "x": pub.x,
        "y": pub.y
    }
}

print(json.dumps(payload, indent=2))

